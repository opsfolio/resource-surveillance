format:
  adjust: true
  hideColumnsWithoutValues:
    - Parents
    - Children
er:
  hideDef: true
  distance: 2
include:
  - code_notebook_kernel
  - code_notebook_cell
  - code_notebook_state
name: Resource Surveillance Notebooks Schema
comments:
  - table: code_notebook_kernel
    columnComments:
      code_notebook_kernel_id: code_notebook_kernel primary key and internal label (not a ULID)
      kernel_name: the kernel name for human/display use cases
      description: any further description of the kernel for human/display use cases
      mime_type: MIME type of this kernel's code in case it will be served
      file_extn: >-
        the typical file extension for these kernel's codebases, can be used for
        syntax highlighting, etc.
      elaboration: kernel-specific attributes/properties
      governance: kernel-specific governance data
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      A Notebook is a group of Cells. A kernel is a computational engine that
      executes the code contained in a notebook cell. 

      Each notebook is associated with a kernel of a specific programming
      language or code transformer which can interpret

      code and produce a result. For example, a SQL notebook might use a SQLite
      kernel for running SQL code and an AI Prompt

      might prepare AI prompts for LLMs.
  - table: code_notebook_cell
    columnComments:
      code_notebook_cell_id: code_notebook_cell primary key
      cell_governance: >-
        any idempotency, versioning, hash, branch, tag or other "governance"
        data (dependent on the cell)
      arguments: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Each Notebook is divided into cells, which are individual units of
      interpretable code.

      The content of Cells depends on the Notebook Kernel and contain the source
      code to be

      executed by the Notebook's Kernel. The output of the code (text, graphics,
      etc.) can be

      stateless or may be stateful and store its results and state transitions
      in code_notebook_state.
  - table: code_notebook_state
    columnComments:
      code_notebook_state_id: code_notebook_state primary key
      code_notebook_cell_id: code_notebook_cell row this state describes
      from_state: the previous state (set to "INITIAL" when it's the first transition)
      to_state: >-
        the current state; if no rows exist it means no state transition
        occurred
      transition_result: if the result of state change is necessary for future use
      transition_reason: short text or code explaining why the transition occurred
      transitioned_at: when the transition occurred
      elaboration: any elaboration needed for the state transition
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Records the state of a notebook's cells' executions, computations, and
      results for Kernels that are stateful. 

      For example, a SQL Notebook Cell that creates tables should only be run
      once (meaning it's statefule). 

      Other Kernels might store results for functions and output defined in one
      cell can be used in later cells.
