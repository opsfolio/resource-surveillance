format:
  adjust: true
  hideColumnsWithoutValues:
    - Parents
    - Children
er:
  hideDef: true
  distance: 2
include:
  - device
  - behavior
  - ur_ingest_resource_path_match_rule
  - ur_ingest_resource_path_rewrite_rule
  - ur_ingest_session
  - ur_ingest_session_fs_path
  - uniform_resource
  - uniform_resource_transform
  - ur_ingest_session_fs_path_entry
  - ur_ingest_session_task
name: Resource Surveillance State Schema
comments:
  - table: device
    columnComments:
      device_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      name: unique device identifier (defaults to hostname)
      state: >-
        should be "SINGLETON" if only one state is allowed, or other tags if
        multiple states are allowed
      boundary: 'can be IP address, VLAN, or any other device name differentiator'
      segmentation: zero trust or other network segmentation
      state_sysinfo: >-
        any sysinfo or other state data that is specific to this device
        (mutable)
      elaboration: any elaboration needed for the device (mutable)
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Identity, network segmentation, and sysinfo for devices on which
      uniform_resource are found
  - table: behavior
    columnComments:
      behavior_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      device_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      behavior_name: 'Arbitrary but unique per-device behavior name (e.g. ingest::xyz)'
      behavior_conf_json: >-
        Configuration, settings, parameters, etc. describing the behavior (JSON,
        behavior-dependent)
      assurance_schema_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      governance: 'Descriptions or other "governance" details (JSON, behavior-dependent)'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: |-
      Behaviors are configuration "presets" that can be used to drive
      application operations at runtime. For example, ingest behaviors
      include configs that indicate which files to ignore, which to
      scan, when to load content, etc. This is more convenient than
      creating

      behavior has a foreign key reference to the device table since
      behaviors might be device-specific.
  - table: ur_ingest_resource_path_match_rule
    columnComments:
      ur_ingest_resource_path_match_rule_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: |-
      A regular expression can determine the flags to apply to an ingestion path
      and if the regular expr contains a nature capture group that pattern match
      will assign the nature too.
  - table: ur_ingest_resource_path_rewrite_rule
    columnComments:
      ur_ingest_resource_path_rewrite_rule_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: |-
      A regular expression can determine whether certain paths should be
      rewritten before ur_ingest_resource_path_match_rule matches occur.
  - table: ur_ingest_session
    columnComments:
      ur_ingest_session_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      device_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      behavior_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      behavior_json: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      ingest_started_at: >-
        {"isSqlDomainZodDescrMeta":true,"isDateSqlDomain":true,"isDateTime":true}
      ingest_finished_at: >-
        {"isSqlDomainZodDescrMeta":true,"isDateSqlDomain":true,"isDateTime":true}
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Immutable ingestion sessions represents any "discovery" or "walk"
      operation.

      This could be a device file system scan or any other resource discovery

      session. Each time a discovery operation starts, a record is created.

      ur_ingest_session has a foreign key reference to the device table so that
      the

      same device can be used for multiple ingest sessions but also the ingest

      sessions can be merged across workstations / servers for easier detection

      of changes and similaries between file systems on different devices.
  - table: ur_ingest_session_fs_path
    columnComments:
      ur_ingest_session_fs_path_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      ingest_session_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Immutable ingest session file system path represents a discovery or "walk"
      path. If

      the session included a file system scan, then root_path is the

      root file system path that was scanned. If the session was discovering

      resources in another target then root_path would be

      representative of the target path (could be a URI).
  - table: uniform_resource
    columnComments:
      uniform_resource_id: uniform_resource ULID primary key
      device_id: which device row introduced this resource
      ingest_session_id: which ur_ingest_session row introduced this resource
      ingest_fs_path_id: which ur_ingest_session_fs_path row introduced this resource
      uri: >-
        the resource's URI (dependent on how it was acquired and on which
        device)
      content_digest: >-
        '-' when no hash was computed (not NULL); content_digest for symlinks
        will be the same as their target
      content: >-
        either NULL if no content was acquired or the actual blob/text of the
        content
      nature: file extension or MIME
      last_modified_at: >-
        {"isSqlDomainZodDescrMeta":true,"isDateSqlDomain":true,"isDateTime":true}
      content_fm_body_attrs: >-
        each component of frontmatter-based content ({ frontMatter: '', body:
        '', attrs: {...} })
      frontmatter: meta data or other "frontmatter" in JSON format
      elaboration: anything that doesn't fit in other columns (JSON)
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: |-
      Immutable resource and content information. On multiple executions,
      uniform_resource are inserted only if the the content (see unique
      index for details). For historical logging, uniform_resource has foreign
      key references to both ur_ingest_session and ur_ingest_session_fs_path
      tables to indicate which particular session and ingestion path the
      resourced was inserted during.
  - table: uniform_resource_transform
    columnComments:
      uniform_resource_transform_id: uniform_resource_transform ULID primary key
      uniform_resource_id: uniform_resource row ID of original content
      content_digest: transformed content hash
      content: transformed content
      nature: file extension or MIME
      elaboration: anything that doesn't fit in other columns (JSON)
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: uniform_resource transformed content
  - table: ur_ingest_session_fs_path_entry
    columnComments:
      ur_ingest_session_fs_path_entry_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      ingest_session_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      ingest_fs_path_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      uniform_resource_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      captured_executable: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      ur_diagnostics: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      ur_transformations: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Contains entries related to file system content ingestion paths. On
      multiple executions,

      unlike uniform_resource, ur_ingest_session_fs_path_entry rows are always
      inserted and

      references the uniform_resource primary key of its related content.

      This method allows for a more efficient query of file version differences
      across

      sessions. With SQL queries, you can detect which sessions have a file
      added or modified,

      which sessions have a file deleted, and what the differences are in file
      contents

      if they were modified across sessions.
  - table: ur_ingest_session_task
    columnComments:
      ur_ingest_session_task_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      ingest_session_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      uniform_resource_id: '{"isSqlDomainZodDescrMeta":true,"isVarChar":true}'
      captured_executable: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      ur_diagnostics: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      ur_transformations: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      elaboration: '{"isSqlDomainZodDescrMeta":true,"isJsonText":true}'
      activity_log: '{"isSqlDomainZodDescrMeta":true,"isJsonSqlDomain":true}'
    tableComment: >-
      Contains entries related to task content ingestion paths. On multiple
      executions,

      unlike uniform_resource, ur_ingest_session_task rows are always inserted
      and

      references the uniform_resource primary key of its related content.

      This method allows for a more efficient query of file version differences
      across

      sessions. With SQL queries, you can detect which sessions have a file
      added or modified,

      which sessions have a file deleted, and what the differences are in file
      contents

      if they were modified across sessions.
